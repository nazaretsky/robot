// Start our examples!
header("A list of functions that we can execute:");
var functions = new [] {
  (int x, int y) => x * y,
  (int x, int y) => x + y,
  (int x, int y) => x - y,
  (int x, int y) => x / y
};

var x = 10;
var y = 5;

foreach (var fn in functions) {
  log(fn(x, y));
}

 //header("The functions can also be named:");
var namedFunctions = new Dictionary<string, Func<int, int, int>>() {
  ["multiply"] = (int x, int y) => x * y,
  ["add"] = (int x, int y) => x + y,
  ["subtract"] = (int x, int y) => x - y,
  ["divide"] = (int x, int y) => x / y,
};

log(namedFunctions["add"](x, y));

header("We can use references to the functions:");
var multiply = (int x, int y) => x * y;
var add = (int x, int y) => x * y;
var subtract = (int x, int y) => x - y;
var divide = (int x, int y) => x / y;

var namedFunctionsList = new [] {
  multiply,
  add,
  subtract,
  divide
};

foreach (var fn in namedFunctionsList) {
  log(fn(x, y));
}

header("We can also accept an arbitrary number of parameters:");
var multiplyN = (int[] numbers) => numbers.Aggregate(1, (a, b) => a * b);
var addN = (int[] numbers) => numbers.Aggregate(0, (a, b) => a + b);
var subtractN = (int[] numbers) => numbers.Aggregate(0, (a, b) => a - b);
var divideN = (int[] numbers) => numbers.Aggregate(1, (a, b) => a / b);

log(multiplyN(new[]{1, 2, 3, 4}));
log(addN(new[]{1, 2, 3, 4}));
log(subtractN(new[]{1, 2, 3, 4}));
log(divideN(new[]{1, 2, 3, 4}));
